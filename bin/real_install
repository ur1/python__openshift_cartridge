#!/bin/bash

# this file provide compile python and install uwsgi

# don't do set -e
# make install cant write to home dir

source ${OPENSHIFT_PYTHON_DIR}bin/_common

python_version=$1
force_reinstall=$2


p="${global_pref}|real_install|python"
_msg "$p begin ${python_version}"

version_dir="${OPENSHIFT_PYTHON_DIR}versions/${python_version}/"
version_local_dir="${version_dir}usr/local/"

# don't make any dirs before this checking
if [ -x "${version_local_dir}bin/python" ] && [[ "${force_reinstall}" != "--force-reinstall" ]]; then
    _msg "$p "
    _msg "rhc ssh --app $OPENSHIFT_APP_NAME '\$python_real_install 1.2.3 --force-reinstall'"
    _msg "$p switch to new version and exit"

    _msg "$p set PATH in env"
    set_env_var \
        OPENSHIFT_PYTHON_PATH_ELEMENT \
        ${version_local_dir}bin/ \
        ${OPENSHIFT_PYTHON_DIR}env/

    _python_display_versions

    _msg " "   ':MSG_NO_TIME:'
    _msg "$p don't forget restart app - this will _actually_ change version "           ':MSG_NO_TIME:'
    _msg "## Manual input instructions #############################################"   ':MSG_NO_TIME:'
    _msg "rhc app-restart --app $OPENSHIFT_APP_NAME"                                    ':MSG_NO_TIME:'
    _msg "## Manual input instructions #############################################"   ':MSG_NO_TIME:'
    _msg " "   ':MSG_NO_TIME:'

    exit 0
fi


if [[ "${force_reinstall}" == "--force-reinstall" ]]; then
    _msg "$p before 'make install' - will delete version $python_version"
    [[ "$python_version" == "$( _get_python_ver_cleaned )" ]] &&
        _msg " - stop cartridge "

    _msg "- delete version $python_version"
fi


SRC_DIR="${OPENSHIFT_TMP_DIR}python_cartridge/"

mkdir -p "$SRC_DIR"

cd "$SRC_DIR"

curl -sOL https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz
tar zxf Python-${python_version}.tgz
cd Python-${python_version}


# bin/ will added by python
_msg "$p configure begin"


## Some optimisations
# not tested
#    --with-system-expat \
#    --with-system-ffi \
#    --without-tcltk-includes \
#    --without-tcltk-libs \
#
#####


## Custom OpenSSL
# for support custom openssl version need
# compile openssl and add it as vars
# This is not tested
#
#    ./config shared --prefix=/my/path --openssldir=/my/path/openssl
#    make
#    make install
#    # Python 3.4
#    export LDFLAGS="-L/my/path/lib/ -L/my/path/lib64/"
#    export LD_LIBRARY_PATH="/my/path/lib/:/my/path/lib64/"
#    export CPPFLAGS="-I/my/path/include -I/my/path/include/openssl"
#    ./configure --prefix=/my/path/
#    make
#    make install
######


./configure \
    --prefix="${version_local_dir}" \
    >> $python_log_actions 2>&1

_msg "$p configure end"

_msg "$p make begin"
make \
    --load-average=4 >>$python_log_actions 2>&1

_msg "$p make end"

# for pass testing need properly config ./configure
# This config produce a lot fails on this platform
# but who cares

#_msg "$p make test begin"
#make test >>$python_log_actions 2>&1
#_msg "$p make test end"


if [[ "${force_reinstall}" == "--force-reinstall" ]]; then
    _msg "$p delete existed version $python_version"
    rm -rf "$version_dir" &&
        _msg "deleted"
   [[ "$python_version" == "$( _get_python_ver_cleaned )" ]] &&
        $python_control stop
fi

mkdir -p "$version_local_dir"

## Make
#
_msg "$p make install"
# make install return error

# The directory '/var/lib/openshift/56a928ce89f5cfd51e000266/.cache/pip'
# or its parent directory is not owned by the current user and caching wheels
# has been disabled. check the permissions and owner of that directory.
# If executing pip with sudo, you may want sudo's -H flag.

# /usr/bin/install: cannot create directory
# `/var/lib/openshift/56b396992d5271199f0001a1/python': Permission denied

# || true  - for disable exitting with error code
# or not use set -e

make install  >>$python_log_actions 2>&1
#
######


rm -rf "$SRC_DIR"


# use function from SDK
# Compare two versions
http://stackoverflow.com/questions/11887762/how-to-compare-version-style-strings

is_python3=`/usr/bin/python2.6 <<END
from distutils.version import LooseVersion, StrictVersion
print LooseVersion("$python_version") > LooseVersion("3")
END
`

is_python2=`/usr/bin/python2.6 <<END
from distutils.version import LooseVersion, StrictVersion
print LooseVersion("2.6") < LooseVersion("$python_version") < LooseVersion("3")
END
`

if [[ "$is_python3" == 'True' ]] &&
    [ -x "${version_local_dir}bin/python3" ]; then

# Why do this?
# simulate virtualenv where 'python -V' return correct value
# even if version 3+
#
# python 3.5.1 after compile not create link to python3 with name python
#

        _msg "$p creating symbolic link to python3"

        ln -s ${version_local_dir}bin/python3 ${version_local_dir}bin/python &&
        _msg "[OK]" || _msg "[FAILED]"


        _msg "$p creating symbolic link to pip3"

        ln -s ${version_local_dir}bin/pip3 ${version_local_dir}bin/pip &&
        _msg "[OK]" || _msg "[FAILED]"
else

    # python2 not bundled with pip
    if [[ "$is_python2" == 'True' ]] &&
        [ -x "${version_local_dir}bin/python2" ]; then

    #
    # python 2.7.9 after compiling not create link to python2 with name python
    #
        _msg "$p creating symbolic link to python2"

            ln -s ${version_local_dir}bin/python2 ${version_local_dir}bin/python &&
            _msg "[OK]" || _msg "[FAILED]"


        _msg "$p install pip for python 2"
        cd ${version_local_dir}bin/

        curl -sOL https://bootstrap.pypa.io/get-pip.py >>$python_log_actions 2>&1

        ${version_local_dir}bin/python get-pip.py >>$python_log_actions 2>&1 &&
            _msg "[OK]" &&
            rm -rf get-pip.py
    else
        _msg "$p python2 nor python3 files not exists"
        _msg "ls ${version_local_dir}bin"
        _msg "$( ls ${version_local_dir}bin )"
    fi

fi

_msg "$p set PATH in env"
set_env_var \
    OPENSHIFT_PYTHON_PATH_ELEMENT \
    ${version_local_dir}bin/ \
    ${OPENSHIFT_PYTHON_DIR}env/


_python_display_versions

_msg " "   ':MSG_NO_TIME:'
_msg "$p don't forget restart app - this will _actually_ change version "           ':MSG_NO_TIME:'
_msg "## Manual input instructions #############################################"   ':MSG_NO_TIME:'
_msg "rhc app-restart --app $OPENSHIFT_APP_NAME"                                    ':MSG_NO_TIME:'
_msg "## Manual input instructions #############################################"   ':MSG_NO_TIME:'
_msg " "   ':MSG_NO_TIME:'

_msg "$p end "


p="${global_pref}_install_uwsgi|"

_msg "$p begin"



__pip () {
    local p
    p=${version_local_dir}bin/pip

    if [ ! -x $p ];then
        _msg "pip not installed"
        exit 1
    else
        $p --no-cache-dir --disable-pip-version-check $@
    fi
}

_msg "$p uwsgi install begin"
__pip install uwsgi >>$python_log_actions 2>&1

_msg "$p uwsgitop install begin"
__pip install uwsgitop >>$python_log_actions 2>&1

# do this in end
# and not in file where make python
# if "set -e" this action can fail all
_msg "$p upgrade pip "
__pip install --upgrade pip >>$python_log_actions 2>&1


_msg "$p end"